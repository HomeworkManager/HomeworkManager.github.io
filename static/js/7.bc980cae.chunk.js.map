{"version":3,"sources":["appbar.js","assignments.js"],"names":["Appbar","title","history","useHistory","useState","drawerOpen","setDrawerOpen","AppBar","position","Toolbar","IconButton","edge","color","onClick","Menu","Typography","variant","noWrap","Drawer","anchor","open","onClose","List","ListItem","button","app","currentUser","logOut","push","ListItemIcon","AccountCircle","ListItemText","primary","profile","email","Divider","Assignments","assignments","setAssignments","addDialogueOpen","setAddDialogueOpen","editDialogueOpen","setEditDialogueOpen","form","setForm","db","mongoClient","useEffect","collection","find","sort","completed","dueDate","name","then","Container","maxWidth","length","map","idx","_id","Checkbox","checked","onChange","value","updateOne","$set","res","temp","slice","toggleCompletion","secondary","formatDate","ListItemSecondaryAction","x","equals","openEditDialogue","Edit","style","textAlign","Fab","bottom","right","Add","Dialog","DialogTitle","disableTypography","DialogContent","dividers","TextField","margin","required","fullWidth","label","autoFocus","e","target","utils","DateFnsUtils","DatePicker","disableToolbar","format","date","DialogActions","Button","preventDefault","insertOne","user_id","id","deleteOne","Date","toDateString","today","getTime","setDate","getDate","firstDay","getFullYear","getMonth","getDay","lastDay","toLocaleDateString","weekday","month","day"],"mappings":"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","file":"static/js/7.bc980cae.chunk.js","sourcesContent":["import {\n  AppBar,\n  Divider,\n  Drawer,\n  IconButton,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport { AccountCircle, Menu } from \"@material-ui/icons\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport app from \"./mongodb\";\n\nexport default function Appbar({ title }) {\n  const history = useHistory();\n  const [drawerOpen, setDrawerOpen] = useState(false);\n\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <IconButton edge=\"start\" color=\"inherit\" onClick={() => setDrawerOpen(true)}>\n          <Menu />\n        </IconButton>\n        <Typography variant=\"h6\" noWrap>\n          {title}\n        </Typography>\n      </Toolbar>\n      <Drawer anchor=\"left\" open={drawerOpen} onClose={() => setDrawerOpen(false)}>\n        <List>\n          <ListItem\n            button\n            onClick={() => {\n              app.currentUser?.logOut();\n              history.push(\"/login\");\n            }}\n          >\n            <ListItemIcon>\n              <AccountCircle />\n            </ListItemIcon>\n            <ListItemText primary={app.currentUser?.profile.email} />\n          </ListItem>\n        </List>\n        <Divider />\n        <List>\n          <ListItem button>Assignments</ListItem>\n          <ListItem button>Classes</ListItem>\n        </List>\n      </Drawer>\n    </AppBar>\n  );\n}\n","import DateFnsUtils from \"@date-io/date-fns\";\nimport {\n  Button,\n  Checkbox,\n  Container,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Fab,\n  IconButton,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemSecondaryAction,\n  ListItemText,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport { Add, Close, Edit } from \"@material-ui/icons\";\nimport { DatePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport { useEffect, useState } from \"react\";\nimport Appbar from \"./appbar\";\nimport app from \"./mongodb\";\n\nexport default function Assignments() {\n  const [assignments, setAssignments] = useState([]);\n  const [addDialogueOpen, setAddDialogueOpen] = useState(false);\n  const [editDialogueOpen, setEditDialogueOpen] = useState(false);\n  const [form, setForm] = useState({});\n\n  const db = app.currentUser?.mongoClient(\"mongodb-atlas\").db(\"HomeworkManager\");\n\n  useEffect(() => {\n    if (!addDialogueOpen && !editDialogueOpen)\n      db.collection(\"Assignments\")\n        .find({}, { sort: { completed: 1, dueDate: 1 }, completed: true, dueDate: true, name: true })\n        .then(setAssignments);\n  }, [addDialogueOpen, editDialogueOpen, db]);\n\n  function toggleCompletion(_id, value, idx) {\n    db.collection(\"Assignments\")\n      .updateOne({ _id }, { $set: { completed: value } })\n      .then((res) => {\n        let temp = assignments.slice();\n        temp[idx].completed = value;\n        setAssignments(temp);\n      });\n  }\n\n  function newAssignment(e) {\n    e.preventDefault();\n    db.collection(\"Assignments\")\n      .insertOne({ ...form, completed: false, user_id: app.currentUser?.id })\n      .then(() => {\n        setForm({});\n        setAddDialogueOpen(false);\n      });\n  }\n\n  function editAssignment(e) {\n    e.preventDefault();\n    db.collection(\"Assignments\")\n      .updateOne({ _id: form._id }, { ...form })\n      .then(() => {\n        setForm({});\n        setEditDialogueOpen(false);\n      });\n  }\n\n  function deleteAssignment(e) {\n    e.preventDefault();\n    db.collection(\"Assignments\")\n      .deleteOne({ _id: form._id })\n      .then(() => {\n        setForm({});\n        setEditDialogueOpen(false);\n      });\n  }\n\n  function openEditDialogue(_id) {\n    setForm(assignments.find((x) => x._id.equals(_id)));\n    setEditDialogueOpen(true);\n  }\n\n  return (\n    <>\n      <Appbar title=\"Assignments\" />\n      <Container maxWidth=\"sm\">\n        <List>\n          {assignments.length ? (\n            assignments.map(({ _id, name, dueDate, completed }, idx) => (\n              <ListItem key={idx}>\n                <ListItemIcon>\n                  <Checkbox\n                    edge=\"start\"\n                    checked={completed}\n                    onChange={() => {\n                      toggleCompletion(_id, !completed, idx);\n                    }}\n                  />\n                </ListItemIcon>\n                <ListItemText primary={name} secondary={formatDate(dueDate)} />\n                <ListItemSecondaryAction>\n                  <IconButton edge=\"end\" onClick={() => openEditDialogue(_id)}>\n                    <Edit />\n                  </IconButton>\n                </ListItemSecondaryAction>\n              </ListItem>\n            ))\n          ) : (\n            <div style={{ textAlign: \"center\" }}>\n              <Typography variant=\"h6\">You have no assignments right now!</Typography>\n            </div>\n          )}\n        </List>\n        <Fab\n          color=\"secondary\"\n          style={{ position: \"absolute\", bottom: \"33px\", right: \"33px\" }}\n          onClick={() => setAddDialogueOpen(true)}\n        >\n          <Add />\n        </Fab>\n      </Container>\n      <Dialog open={addDialogueOpen}>\n        <DialogTitle disableTypography>\n          <Typography variant=\"h6\">New Assignment</Typography>\n        </DialogTitle>\n        <DialogContent dividers>\n          <TextField\n            variant=\"standard\"\n            margin=\"normal\"\n            required\n            fullWidth\n            label=\"Name\"\n            autoFocus\n            onChange={(e) => setForm({ ...form, name: e.target.value })}\n          />\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <DatePicker\n              disableToolbar\n              variant=\"inline\"\n              format=\"MM/dd/yyyy\"\n              margin=\"normal\"\n              label=\"Due Date\"\n              value={form.dueDate}\n              onChange={(date) => setForm({ ...form, dueDate: date })}\n            />\n          </MuiPickersUtilsProvider>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            onClick={() => {\n              setAddDialogueOpen(false);\n              setForm({});\n            }}\n            color=\"primary\"\n          >\n            Cancel\n          </Button>\n          <Button color=\"primary\" onClick={newAssignment}>\n            Add\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <Dialog open={editDialogueOpen}>\n        <DialogTitle disableTypography>\n          <Typography variant=\"h6\">Edit Assignment</Typography>\n        </DialogTitle>\n        <DialogContent dividers>\n          <TextField\n            variant=\"standard\"\n            margin=\"normal\"\n            required\n            fullWidth\n            label=\"Name\"\n            autoFocus\n            value={form.name || \"\"}\n            onChange={(e) => setForm({ ...form, name: e.target.value })}\n          />\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <DatePicker\n              disableToolbar\n              variant=\"inline\"\n              format=\"MM/dd/yyyy\"\n              margin=\"normal\"\n              label=\"Due Date\"\n              value={form.dueDate}\n              onChange={(date) => setForm({ ...form, dueDate: date })}\n            />\n          </MuiPickersUtilsProvider>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={deleteAssignment} color=\"primary\">\n            Delete\n          </Button>\n          <Button\n            onClick={() => {\n              setEditDialogueOpen(false);\n              setForm({});\n            }}\n            color=\"primary\"\n          >\n            Cancel\n          </Button>\n          <Button color=\"primary\" onClick={editAssignment}>\n            Change\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n}\n\nfunction formatDate(date) {\n  // Remove time from date\n  date = new Date(new Date(date).toDateString());\n\n  let today = new Date();\n\n  // If it is due today\n  if (date.getTime() === today.getTime()) return \"today\";\n\n  // If it is due tomorrow\n  today.setDate(today.getDate() + 1);\n  if (date.getTime() === today.getTime()) return \"tomorrow\";\n\n  // If it is due this week\n  today = new Date();\n  let firstDay = new Date(today.getFullYear(), today.getMonth(), today.getDate() - today.getDay());\n  let lastDay = new Date(today.getFullYear(), today.getMonth(), firstDay.getDate() + 6);\n  if (date >= firstDay && date <= lastDay) return date.toLocaleDateString(\"en-US\", { weekday: \"short\" });\n\n  // Otherwise just print the date\n  return date.toLocaleDateString(\"en-US\", { month: \"numeric\", day: \"numeric\" });\n}\n"],"sourceRoot":""}