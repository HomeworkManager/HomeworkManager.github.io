{"version":3,"sources":["appbar.js","assignments.js","mongodb.js"],"names":["Appbar","title","history","useHistory","useState","drawerOpen","setDrawerOpen","AppBar","position","Toolbar","IconButton","edge","color","onClick","Menu","Typography","variant","noWrap","Drawer","anchor","open","onClose","style","width","List","ListItem","button","app","currentUser","logOut","push","ListItemIcon","AccountCircle","ListItemText","primary","Divider","Assignments","assignments","setAssignments","dialogueOpen","setDialogueOpen","form","setForm","db","mongoClient","useEffect","collection","find","sort","completed","dueDate","name","then","map","idx","_id","Checkbox","checked","onChange","value","updateOne","$set","res","temp","slice","toggleCompletion","secondary","formatDate","Fab","bottom","right","Add","Dialog","DialogTitle","disableTypography","Close","DialogContent","dividers","TextField","margin","required","fullWidth","label","autoFocus","e","target","utils","DateFnsUtils","DatePicker","disableToolbar","format","date","KeyboardButtonProps","DialogActions","Button","preventDefault","insertOne","user_id","id","Date","toDateString","today","getTime","setDate","getDate","firstDay","getFullYear","getMonth","getDay","lastDay","toLocaleDateString","weekday","month","day","App"],"mappings":"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","file":"static/js/7.a2a48b45.chunk.js","sourcesContent":["import {\n  AppBar,\n  Divider,\n  Drawer,\n  IconButton,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport { AccountCircle, Menu } from \"@material-ui/icons\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport app from \"./mongodb\";\n\nexport default function Appbar({ title }) {\n  const history = useHistory();\n  const [drawerOpen, setDrawerOpen] = useState(false);\n\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <IconButton edge=\"start\" color=\"inherit\" onClick={() => setDrawerOpen(true)}>\n          <Menu />\n        </IconButton>\n        <Typography variant=\"h6\" noWrap>\n          {title}\n        </Typography>\n      </Toolbar>\n      <Drawer anchor=\"left\" open={drawerOpen} onClose={() => setDrawerOpen(false)}>\n        <div style={{ width: 200 }}>\n          <List>\n            <ListItem\n              button\n              onClick={() => {\n                app.currentUser?.logOut();\n                history.push(\"/login\");\n              }}\n            >\n              <ListItemIcon>\n                <AccountCircle />\n              </ListItemIcon>\n              <ListItemText primary={\"User Name\"} />\n            </ListItem>\n          </List>\n          <Divider />\n          <List>\n            <ListItem button>Assignments</ListItem>\n            <ListItem button>Classes</ListItem>\n          </List>\n        </div>\n      </Drawer>\n    </AppBar>\n  );\n}\n","import DateFnsUtils from \"@date-io/date-fns\";\nimport {\n  Button,\n  Checkbox,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Fab,\n  IconButton,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport { Add, Close } from \"@material-ui/icons\";\nimport { DatePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport { useEffect, useState } from \"react\";\nimport Appbar from \"./appbar\";\nimport app from \"./mongodb\";\n\nexport default function Assignments() {\n  const [assignments, setAssignments] = useState([]);\n  const [dialogueOpen, setDialogueOpen] = useState(false);\n  const [form, setForm] = useState({});\n\n  const db = app.currentUser?.mongoClient(\"mongodb-atlas\").db(\"HomeworkManager\");\n\n  useEffect(() => {\n    db.collection(\"Assignments\")\n      .find({}, { sort: { completed: 1, dueDate: 1 }, completed: true, dueDate: true, name: true })\n      .then(setAssignments);\n  }, [dialogueOpen, db]);\n\n  function toggleCompletion(_id, value, idx) {\n    db.collection(\"Assignments\")\n      .updateOne({ _id }, { $set: { completed: value } })\n      .then((res) => {\n        let temp = assignments.slice();\n        temp[idx].completed = value;\n        setAssignments(temp);\n      });\n  }\n\n  function newAssignment(e) {\n    e.preventDefault();\n    db.collection(\"Assignments\")\n      .insertOne({ ...form, completed: false, user_id: app.currentUser.id })\n      .then(() => {\n        setForm({});\n        setDialogueOpen(false);\n      });\n  }\n\n  return (\n    <>\n      <Appbar title=\"Assignments\" />\n      <List>\n        {assignments.map(({ _id, name, dueDate, completed }, idx) => (\n          <ListItem key={idx}>\n            <ListItemIcon>\n              <Checkbox\n                edge=\"start\"\n                checked={completed}\n                onChange={() => {\n                  toggleCompletion(_id, !completed, idx);\n                }}\n              />\n            </ListItemIcon>\n            <ListItemText primary={name} secondary={formatDate(dueDate)} />\n          </ListItem>\n        ))}\n      </List>\n      <Fab\n        color=\"secondary\"\n        style={{ position: \"absolute\", bottom: \"33px\", right: \"33px\" }}\n        onClick={() => setDialogueOpen(true)}\n      >\n        <Add />\n      </Fab>\n      <Dialog open={dialogueOpen} onClose={() => setDialogueOpen(false)}>\n        <DialogTitle disableTypography>\n          <Typography variant=\"h6\">New Assignment</Typography>\n          {!dialogueOpen ? (\n            <IconButton>\n              <Close />\n            </IconButton>\n          ) : null}\n        </DialogTitle>\n        <DialogContent dividers>\n          <TextField\n            variant=\"standard\"\n            margin=\"normal\"\n            required\n            fullWidth\n            label=\"Name\"\n            autoFocus\n            onChange={(e) => setForm({ ...form, name: e.target.value })}\n          />\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <DatePicker\n              disableToolbar\n              variant=\"inline\"\n              format=\"MM/dd/yyyy\"\n              margin=\"normal\"\n              label=\"Due Date\"\n              value={form.dueDate}\n              onChange={(date) => setForm({ ...form, dueDate: date })}\n              KeyboardButtonProps={{\n                \"aria-label\": \"change date\",\n              }}\n            />\n          </MuiPickersUtilsProvider>\n        </DialogContent>\n        <DialogActions>\n          <Button color=\"primary\" onClick={newAssignment}>\n            Add\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n}\n\nfunction formatDate(date) {\n  // Remove time from date\n  date = new Date(date.toDateString());\n\n  let today = new Date();\n\n  // If it is due today\n  if (date.getTime() === today.getTime()) return \"today\";\n\n  // If it is due tomorrow\n  today.setDate(today.getDate() + 1);\n  if (date.getTime() === today.getTime()) return \"tomorrow\";\n\n  // If it is due this week\n  today = new Date();\n  let firstDay = new Date(today.getFullYear(), today.getMonth(), today.getDate() - today.getDay());\n  let lastDay = new Date(today.getFullYear(), today.getMonth(), firstDay.getDate() + 6);\n  if (date >= firstDay && date <= lastDay) return date.toLocaleDateString(\"en-US\", { weekday: \"short\" });\n\n  // Otherwise just print the date\n  return date.toLocaleDateString(\"en-US\", { month: \"numeric\", day: \"numeric\" });\n}\n","import { App } from \"realm-web\";\nconst app = new App({ id: \"application-0-eomix\" });\n\nexport default app;\n"],"sourceRoot":""}