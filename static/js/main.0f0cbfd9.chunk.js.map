{"version":3,"sources":["serviceWorkerRegistration.js","appbar.js","graphql.js","assignments.js","login.js","app.js","theme.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Appbar","title","history","useHistory","useState","drawerOpen","setDrawerOpen","AppBar","position","Toolbar","IconButton","edge","color","onClick","Menu","Typography","variant","noWrap","Drawer","anchor","open","onClose","style","width","List","ListItem","button","sessionStorage","clear","go","ListItemIcon","AccountCircle","ListItemText","primary","Divider","createBrowserHistory","Assignments","assignments","setAssignments","useEffect","query","variables","fetch","method","headers","Authorization","getItem","body","JSON","stringify","res","ok","json","data","map","idx","name","dueDate","completed","Checkbox","checked","secondary","formatDate","Fab","bottom","right","Add","date","Date","toDateString","today","getTime","setDate","getDate","firstDay","getFullYear","getMonth","getDay","lastDay","toLocaleDateString","weekday","month","day","Login","email","setEmail","password","setPassword","loginFailed","submit","e","a","preventDefault","username","access_token","setItem","onSubmit","Container","component","maxWidth","marginTop","display","flexDirection","alignItems","TextField","margin","required","fullWidth","id","label","autoComplete","autoFocus","onChange","target","value","type","Button","Grid","container","item","to","App","CssBaseline","path","createMuiTheme","palette","light","main","dark","contrastText","ReactDOM","render","ThemeProvider","theme","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.0f0cbfd9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  AppBar,\n  Divider,\n  Drawer,\n  IconButton,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemIcon,\n  ListItemText,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport { AccountCircle, Menu } from \"@material-ui/icons\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router\";\n\nexport default function Appbar({ title }) {\n  const history = useHistory();\n  const [drawerOpen, setDrawerOpen] = useState(false);\n\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <IconButton edge=\"start\" color=\"inherit\" onClick={() => setDrawerOpen(true)}>\n          <Menu />\n        </IconButton>\n        <Typography variant=\"h6\" noWrap>\n          {title}\n        </Typography>\n      </Toolbar>\n      <Drawer anchor=\"left\" open={drawerOpen} onClose={() => setDrawerOpen(false)}>\n        <div style={{ width: 200 }}>\n          <List>\n            <ListItem\n              button\n              onClick={() => {\n                sessionStorage.clear();\n                history.go(0);\n              }}\n            >\n              <ListItemIcon>\n                <AccountCircle />\n              </ListItemIcon>\n              <ListItemText primary={\"User Name\"} />\n            </ListItem>\n          </List>\n          <Divider />\n          <List>\n            <ListItem button>Assignments</ListItem>\n            <ListItem button>Classes</ListItem>\n          </List>\n        </div>\n      </Drawer>\n    </AppBar>\n  );\n}\n","import { createBrowserHistory } from \"history\";\n\nexport const history = createBrowserHistory();\n\nexport default (query, variables) =>\n  fetch(\"https://realm.mongodb.com/api/client/v2.0/app/application-0-eomix/graphql\", {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + sessionStorage.getItem(\"access_token\"),\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      query,\n      variables,\n    }),\n  }).then((res) => {\n    if (res.ok) return res.json();\n    sessionStorage.clear();\n    history.go(0);\n  });\n","import { Checkbox, Fab, List, ListItem, ListItemIcon, ListItemText } from \"@material-ui/core\";\nimport { Add } from \"@material-ui/icons\";\nimport { useEffect, useState } from \"react\";\nimport Appbar from \"./appbar\";\nimport graphql from \"./graphql\";\n\nexport default function Assignments() {\n  const [assignments, setAssignments] = useState([]);\n\n  useEffect(() => {\n    graphql(`\n      query {\n        assignments {\n          completed\n          dueDate\n          name\n        }\n      }\n    `)\n      .then((json) => json.data.assignments || [])\n      .then(setAssignments);\n  }, []);\n\n  return (\n    <>\n      <Appbar title=\"Assignments\" />\n      <List>\n        {assignments.map(({ name, dueDate, completed }, idx) => (\n          <ListItem key={idx}>\n            <ListItemIcon>\n              <Checkbox edge=\"start\" checked={completed} />\n            </ListItemIcon>\n            <ListItemText primary={name} secondary={formatDate(dueDate)} />\n          </ListItem>\n        ))}\n      </List>\n      <Fab color=\"secondary\" style={{ position: \"absolute\", bottom: \"33px\", right: \"33px\" }}>\n        <Add />\n      </Fab>\n    </>\n  );\n}\n\nfunction formatDate(date) {\n  // Remove time from date\n  date = new Date(new Date(date).toDateString());\n\n  let today = new Date();\n\n  // If it is due today\n  if (date.getTime() === today.getTime()) return \"today\";\n\n  // If it is due tomorrow\n  today.setDate(today.getDate() + 1);\n  if (date.getTime() === today.getTime()) return \"tomorrow\";\n\n  // If it is due this week\n  today = new Date();\n  let firstDay = new Date(today.getFullYear(), today.getMonth(), today.getDate() - today.getDay());\n  let lastDay = new Date(today.getFullYear(), today.getMonth(), firstDay.getDate() + 6);\n  if (date >= firstDay && date <= lastDay) return date.toLocaleDateString(\"en-US\", { weekday: \"short\" });\n\n  // Otherwise just print the date\n  return date.toLocaleDateString(\"en-US\", { month: \"numeric\", day: \"numeric\" });\n}\n","import { useState } from \"react\";\nimport { Button, Container, Grid, TextField, Typography } from \"@material-ui/core\";\nimport { useHistory } from \"react-router\";\nimport { NavLink } from \"react-router-dom\";\n\nexport default function Login() {\n  const history = useHistory();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [loginFailed] = useState(false);\n\n  async function submit(e) {\n    console.log(email, password);\n    e.preventDefault();\n    const { access_token } = await fetch(\n      \"https://realm.mongodb.com/api/client/v2.0/app/application-0-eomix/auth/providers/local-userpass/login\",\n      {\n        headers: { \"Content-Type\": \"application/json\" },\n        method: \"POST\",\n        body: JSON.stringify({ username: email, password }),\n      }\n    ).then((res) => res.json());\n    sessionStorage.setItem(\"access_token\", access_token);\n    history.go(0);\n  }\n\n  return (\n    <form onSubmit={submit}>\n      <Container component=\"main\" maxWidth=\"xs\">\n        <div style={{ marginTop: \"80px\", display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\n          <Typography component=\"h1\" variant=\"h5\">\n            Login\n          </Typography>\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"email\"\n            label=\"Email Address\"\n            name=\"email\"\n            autoComplete=\"email\"\n            autoFocus\n            onChange={(e) => setEmail(e.target.value)}\n          />\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"password\"\n            label=\"Password\"\n            type=\"password\"\n            id=\"password\"\n            autoComplete=\"current-password\"\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          {loginFailed && <Typography component=\"p\">Login Failed</Typography>}\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            style={{ marginTop: \"20px\" }}\n            onClick={submit}\n          >\n            Submit\n          </Button>\n          <Grid container style={{ marginTop: \"10px\" }}>\n            <Grid item>\n              or{\" \"}\n              <NavLink to=\"/create-account\" variant=\"body2\">\n                Create Account\n              </NavLink>\n            </Grid>\n          </Grid>\n        </div>\n      </Container>\n    </form>\n  );\n}\n","import { CssBaseline } from \"@material-ui/core\";\nimport { Route, Router, Switch } from \"react-router-dom\";\nimport Assignments from \"./assignments\";\nimport { history } from \"./graphql\";\nimport Login from \"./login\";\n\nexport default function App() {\n  return (\n    <Router history={history}>\n      <CssBaseline />\n      {!sessionStorage.getItem(\"access_token\") ? (\n        <Switch>\n          <Route>\n            <Login path=\"/login\" />\n          </Route>\n        </Switch>\n      ) : (\n        <Switch>\n          <Route path=\"/assignments\">\n            <Assignments />\n          </Route>\n        </Switch>\n      )}\n    </Router>\n  );\n}\n","import { createMuiTheme } from \"@material-ui/core\";\n\nexport default createMuiTheme({\n  palette: {\n    primary: {\n      light: \"#757ce8\",\n      main: \"#c83737\",\n      dark: \"#d35f5f\",\n      contrastText: \"#fff\",\n    },\n    secondary: {\n      light: \"#007bb2\",\n      main: \"#00b0ff\",\n      dark: \"#33bfff\",\n      contrastText: \"#000\",\n    },\n  },\n});\n","import React, { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport App from \"./app\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport theme from \"./theme\";\n\nconsole.log(sessionStorage.getItem(\"email\"));\n\nReactDOM.render(\n  <StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}