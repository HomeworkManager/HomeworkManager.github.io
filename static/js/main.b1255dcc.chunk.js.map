{"version":3,"sources":["serviceWorkerRegistration.js","app.js","theme.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Assignments","lazy","Login","CreateAccount","App","CssBaseline","fallback","LinearProgress","color","exact","from","to","path","createMuiTheme","palette","primary","light","main","dark","contrastText","secondary","sessionStorage","getItem","ReactDOM","render","ThemeProvider","theme","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"gLAYMA,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DAqCnC,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,+GAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,M,0CC3F3DC,EAAcC,gBAAK,kBAAM,8DACzBC,EAAQD,gBAAK,kBAAM,8DACnBE,EAAgBF,gBAAK,kBAAM,uDAElB,SAASG,IACtB,OACE,eAAC,IAAD,WACE,cAACC,EAAA,EAAD,IACA,cAAC,WAAD,CAAUC,SAAU,cAACC,EAAA,EAAD,CAAgBC,MAAM,cAA1C,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAUC,OAAK,EAACC,KAAK,IAAIC,GAAG,iBAC5B,cAAC,IAAD,CAAOC,KAAK,SAAZ,SACE,cAACV,EAAD,MAEF,cAAC,IAAD,CAAOU,KAAK,kBAAZ,SACE,cAACT,EAAD,MAEF,cAAC,IAAD,CAAOS,KAAK,eAAZ,SACE,cAACZ,EAAD,c,oBCnBGa,cAAe,CAC5BC,QAAS,CACPC,QAAS,CACPC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,aAAc,QAEhBC,UAAW,CACTJ,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,aAAc,WCPpBzB,QAAQC,IAAI0B,eAAeC,QAAQ,UAEnCC,IAASC,OACP,cAAC,aAAD,UACE,cAACC,EAAA,EAAD,CAAeC,MAAOA,EAAtB,SACE,cAACtB,EAAD,QAGJuB,SAASC,eAAe,SHKnB,SAAkB9C,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI8C,IAAIC,GAAwBtD,OAAOC,SAASsD,MACpDC,SAAWxD,OAAOC,SAASuD,OAIvC,OAGFxD,OAAOyD,iBAAiB,QAAQ,WAC9B,IAAMpD,EAAK,UAAMiD,GAAN,sBAEPxD,IAgEV,SAAiCO,EAAOC,GAEtCoD,MAAMrD,EAAO,CACXsD,QAAS,CAAE,iBAAkB,YAE5BjD,MAAK,SAACkD,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CzD,UAAUC,cAAcyD,MAAMvD,MAAK,SAACC,GAClCA,EAAauD,aAAaxD,MAAK,WAC7BV,OAAOC,SAASkE,eAKpB/D,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IAAI,oEAtFViD,CAAwB/D,EAAOC,GAI/BC,UAAUC,cAAcyD,MAAMvD,MAAK,WACjCQ,QAAQC,IACN,+GAMJf,EAAgBC,EAAOC,OG3B/B+D,K","file":"static/js/main.b1255dcc.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { CssBaseline, LinearProgress } from \"@material-ui/core\";\nimport { lazy, Suspense } from \"react\";\nimport { BrowserRouter, Redirect, Route, Switch } from \"react-router-dom\";\nconst Assignments = lazy(() => import(\"./assignments\"));\nconst Login = lazy(() => import(\"./login\"));\nconst CreateAccount = lazy(() => import(\"./create-account\"));\n\nexport default function App() {\n  return (\n    <BrowserRouter>\n      <CssBaseline />\n      <Suspense fallback={<LinearProgress color=\"secondary\" />}>\n        <Switch>\n          <Redirect exact from=\"/\" to=\"/assignments\" />\n          <Route path=\"/login\">\n            <Login />\n          </Route>\n          <Route path=\"/create-account\">\n            <CreateAccount />\n          </Route>\n          <Route path=\"/assignments\">\n            <Assignments />\n          </Route>\n        </Switch>\n      </Suspense>\n    </BrowserRouter>\n  );\n}\n","import { createMuiTheme } from \"@material-ui/core\";\n\nexport default createMuiTheme({\n  palette: {\n    primary: {\n      light: \"#757ce8\",\n      main: \"#c83737\",\n      dark: \"#d35f5f\",\n      contrastText: \"#fff\",\n    },\n    secondary: {\n      light: \"#007bb2\",\n      main: \"#00b0ff\",\n      dark: \"#33bfff\",\n      contrastText: \"#000\",\n    },\n  },\n});\n","import React, { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport App from \"./app\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport theme from \"./theme\";\n\nconsole.log(sessionStorage.getItem(\"email\"));\n\nReactDOM.render(\n  <StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}