{"version":3,"sources":["serviceWorkerRegistration.js","assignments.js","login.js","app.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Assignments","Login","useReducer","name","value","email","password","form","updateForm","useState","loginFailed","submit","e","a","preventDefault","sessionStorage","setItem","fetch","method","headers","res","json","useEffect","onSubmit","Container","component","maxWidth","style","marginTop","display","flexDirection","alignItems","Typography","variant","TextField","margin","required","fullWidth","id","label","autoComplete","autoFocus","onChange","target","type","Button","color","onClick","Grid","container","item","Link","href","App","CssBaseline","getItem","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.64488913.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","export default function Assignments() {\n  return <></>;\n}\n","import React, { useEffect, useReducer, useState } from \"react\";\nimport { Button, Container, Grid, Link, TextField, Typography } from \"@material-ui/core\";\n\nexport default function Login() {\n  const [form, updateForm] = useReducer(({ name, value }, state) => ({ ...state, [name]: value }), {\n    email: \"\",\n    password: \"\",\n  });\n  const [loginFailed, setLoginFailed] = useState(false);\n  useEffect(() => {\n    submit({ preventDefault: () => {} });\n  }, []);\n\n  async function submit(e) {\n    e.preventDefault();\n    const { email, password } = form;\n    sessionStorage.setItem(\"email\", email);\n    sessionStorage.setItem(\"password\", password);\n    const response = await fetch(\"https://realm.mongodb.com/api/client/v2.0/app/application-0-eomix/graphql\", {\n      method: \"POST\",\n      headers: {\n        email,\n        password,\n        \"Content-Type\": \"application/json\",\n      },\n      // body: JSON.stringify({\n      //   query: `\n      //     query ($email: string!, password: string!) {\n      //       users(where: {email: $email, password: $password}) {\n      //         _id,\n      //         email\n      //       }\n      //     }\n      //   `,\n      //   variables: form,\n      // }),\n    }).then((res) => res.json());\n    \n  }\n  return (\n    <form onSubmit={submit}>\n      <Container component=\"main\" maxWidth=\"xs\">\n        <div style={{ marginTop: \"80px\", display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\n          <Typography component=\"h1\" variant=\"h5\">\n            Login\n          </Typography>\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"email\"\n            label=\"Email Address\"\n            name=\"email\"\n            autoComplete=\"email\"\n            autoFocus\n            onChange={(e) => updateForm({ name: \"email\", value: e.target.value })}\n          />\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"password\"\n            label=\"Password\"\n            type=\"password\"\n            id=\"password\"\n            autoComplete=\"current-password\"\n            onChange={(e) => updateForm({ name: \"password\", value: e.target.value })}\n          />\n          {loginFailed && <Typography component=\"p\">Login Failed</Typography>}\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            style={{ marginTop: \"20px\" }}\n            onClick={submit}\n          >\n            Submit\n          </Button>\n          <Grid container style={{ marginTop: \"10px\" }}>\n            <Grid item>\n              <Link href=\"#\" variant=\"body2\">\n                Sign Up\n              </Link>\n            </Grid>\n          </Grid>\n        </div>\n      </Container>\n    </form>\n  );\n}\n","import { CssBaseline } from \"@material-ui/core\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport Assignments from \"./assignments\";\nimport Login from \"./login\";\n\nexport default function App() {\n  return (\n    <BrowserRouter>\n      <CssBaseline />\n      {!sessionStorage.getItem(\"email\") ? <Login /> : <Assignments />}\n    </BrowserRouter>\n  );\n}\n","import React, { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport App from \"./app\";\n\nconsole.log(sessionStorage.getItem(\"email\"));\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}